var documenterSearchIndex = {"docs":
[{"location":"reference/logger/#Logging-operations","page":"Logging operations","title":"Logging operations","text":"","category":"section"},{"location":"reference/logger/","page":"Logging operations","title":"Logging operations","text":"logmetric\nlogbatch\nloginputs\nlogparam","category":"page"},{"location":"reference/logger/#MLFlowClient.logmetric","page":"Logging operations","title":"MLFlowClient.logmetric","text":"logmetric(instance::MLFlow, run_id::String, key::String, value::Float64;\n    timestamp::Int64=round(Int, now() |> datetime2unix),\n    step::Union{Int64, Missing}=missing)\nlogmetric(instance::MLFlow, run::Run, key::String, value::Float64;\n    timestamp::Int64=round(Int, now() |> datetime2unix),\n    step::Union{Int64, Missing}=missing)\n\nLog a Metric for a Run. A Metric is a key-value pair (string key, float value) with an associated timestamp. Examples include the various metrics that represent ML model accuracy. A Metric can be logged multiple times.\n\nArguments\n\ninstance: MLFlow configuration.\nrun_id: ID of the Run under which to log the Metric.\nkey: Name of the Metric.\nvalue: Double value of the Metric being logged.\ntimestamp: Unix timestamp in milliseconds at the time Metric was logged.\nstep: Step at which to log the Metric.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/logger/#MLFlowClient.logbatch","page":"Logging operations","title":"MLFlowClient.logbatch","text":"logbatch(instance::MLFlow, run_id::String; metrics::MLFlowUpsertData{Metric},\n    params::MLFlowUpsertData{Param}, tags::MLFlowUpsertData{Tag})\nlogbatch(instance::MLFlow, run::Run; metrics::Array{Metric},\n    params::MLFlowUpsertData{Param}, tags::MLFlowUpsertData{Tag})\n\nLog a batch of metrics, params, and tags for a Run. In case of error, partial data may be written.\n\nFor more information about this function, check MLFlow official documentation.\n\nArguments\n\ninstance: MLFlow configuration.\nrun_id: ID of the Run to log under.\nmetrics: A collection of Metric to log.\nparams: A collection of Param to log.\ntags: A collection of Tag to log.\n\nNote: A single request can contain up to 1000 metrics, and up to 1000 metrics, params, and tags in total.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/logger/#MLFlowClient.loginputs","page":"Logging operations","title":"MLFlowClient.loginputs","text":"loginputs(instance::MLFlow, run_id::String; datasets::Array{DatasetInput})\nloginputs(instance::MLFlow, run::Run; datasets::Array{DatasetInput})\n\nArguments\n\ninstance: MLFlow configuration.\nrun_id: ID of the Run to log under this field is required.\ndatasets: A collection of DatasetInput to log.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/logger/#MLFlowClient.logparam","page":"Logging operations","title":"MLFlowClient.logparam","text":"logparam(instance::MLFlow, run_id::String, key::String, value::String)\nlogparam(instance::MLFlow, run::Run, key::String, value::String)\nlogparam(instance::MLFlow, run_id::String, param::Param)\nlogparam(instance::MLFlow, run::Run, param::Param)\n\nLog a Param used for a Run. A Param is a key-value pair (string key, string value). Examples include hyperparameters used for ML model training and constant dates and values used in an ETL pipeline. A Param can be logged only once for a Run.\n\nArguments\n\ninstance: MLFlow configuration.\nrun_id: ID of the Run under which to log the Param.\nkey: Name of the Param.\nvalue: String value of the Param being logged.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/run/#Run-operations","page":"Run operations","title":"Run operations","text":"","category":"section"},{"location":"reference/run/","page":"Run operations","title":"Run operations","text":"createrun\ndeleterun\nrestorerun\ngetrun\nsetruntag\ndeleteruntag\nsearchruns\nupdaterun","category":"page"},{"location":"reference/run/#MLFlowClient.createrun","page":"Run operations","title":"MLFlowClient.createrun","text":"createrun(instance::MLFlow, experiment_id::String;\n    run_name::Union{String, Missing}=missing,\n    start_time::Union{Int64, Missing}=missing,\n    tags::Union{Dict{<:Any}, Array{<:Any}}=[])\n\nCreate a new Run within an Experiment. A Run is usually a single execution of a machine learning or data ETL pipeline.\n\nArguments\n\ninstance: MLFlow configuration.\nexperiment_id: ID of the associated Experiment.\nrun_name: Name of the Run.\nstart_time: Unix timestamp in milliseconds of when the Run started.\ntags: Additional metadata for Run.\n\nReturns\n\nAn instance of type Run.\n\n\n\n\n\n","category":"function"},{"location":"reference/run/#MLFlowClient.deleterun","page":"Run operations","title":"MLFlowClient.deleterun","text":"deleterun(instance::MLFlow, run_id::String)\ndeleterun(instance::MLFlow, run::Run)\n\nMark a Run for deletion.\n\nArguments\n\ninstance: MLFlow configuration.\nrun_id: ID of the Run to delete.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/run/#MLFlowClient.restorerun","page":"Run operations","title":"MLFlowClient.restorerun","text":"restorerun(instance::MLFlow, run_id::String)\nrestorerun(instance::MLFlow, run::Run)\n\nRestore a deleted Run.\n\nArguments\n\ninstance: MLFlow configuration.\nrun_id: ID of the Run to restore.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/run/#MLFlowClient.getrun","page":"Run operations","title":"MLFlowClient.getrun","text":"getrun(instance::MLFlow, run_id::String)\n\nGet metadata, metrics, params, and tags for a Run. In the case where multiple metrics with the same key are logged for a Run, return only the value with the latest timestamp. If there are multiple values with the latest timestamp, return the maximum of these values.\n\nArguments\n\ninstance: MLFlow configuration.\nrun_id: ID of the Run to fetch.\n\nReturns\n\nAn instance of type Run.\n\n\n\n\n\n","category":"function"},{"location":"reference/run/#MLFlowClient.setruntag","page":"Run operations","title":"MLFlowClient.setruntag","text":"setruntag(instance::MLFlow, run_id::String, key::String, value::String)\nsetruntag(instance::MLFlow, run::Run, key::String, value::String)\nsetruntag(instance::MLFlow, run::Run, tag::Tag)\n\nSet a Tag on a Run.\n\nArguments\n\ninstance: MLFlow configuration.\nrun_id: ID of the Run under which to log the Tag.\nkey: Name of the Tag.\nvalue: String value of the Tag being logged.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/run/#MLFlowClient.deleteruntag","page":"Run operations","title":"MLFlowClient.deleteruntag","text":"deleteruntag(instance::MLFlow, run_id::String, key::String)\ndeleteruntag(instance::MLFlow, run::Run, key::String)\ndeleteruntag(instance::MLFlow, run::Run, tag::Tag)\n\nDelete a Tag on a Run.\n\nArguments\n\ninstance: MLFlow configuration.\nrun_id: ID of the Run that the Tag was logged under.\nkey: Name of the Tag.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/run/#MLFlowClient.searchruns","page":"Run operations","title":"MLFlowClient.searchruns","text":"searchruns(instance::MLFlow; experiment_ids::Array{String}=String[], filter::String=\"\",\n    run_view_type::ViewType=ACTIVE_ONLY, max_results::Int=1000,\n    order_by::Array{String}=String[], page_token::String=\"\")\n\nSearch for runs that satisfy expressions. Search expressions can use Metric and Param keys.\n\nArguments\n\ninstance: MLFlow configuration.\nexperiment_ids: List of Experiment IDs to search over.\nfilter: A filter expression over params, metrics, and tags, that allows returning a   subset of runs. See MLFlow documentation.\nrun_view_type: Whether to display only active, only deleted, or all runs. Defaults to   only active runs.\nmax_results: Maximum number of runs desired.\norder_by: List of columns to be ordered by, including attributes, params, metrics, and   tags with an optional “DESC” or “ASC” annotation, where “ASC” is the default.\npage_token: Token indicating the page of runs to fetch.\n\nReturns\n\nVector of Run that were found in the specified experiments.\nThe next page token if there are more results.\n\n\n\n\n\n","category":"function"},{"location":"reference/run/#MLFlowClient.updaterun","page":"Run operations","title":"MLFlowClient.updaterun","text":"updaterun(instance::MLFlow, run_id::String; status::Union{RunStatus, Missing}=missing,\n    end_time::Union{Int64, Missing}=missing, run_name::Union{String, Missing}=missing)\nupdaterun(instance::MLFlow, run::Run; status::Union{RunStatus, Missing}=missing,\n    end_time::Union{Int64, Missing}=missing, run_name::Union{String, Missing}=missing)\n\nUpdate Run metadata.\n\nArguments\n\ninstance: MLFlow configuration.\nrun_id: ID of the Run to update.\nstatus: Updated status of the Run.\nend_time: Unix timestamp in milliseconds of when the Run ended.\nrun_name: Updated name of the Run.\n\nReturns\n\nAn instance of type RunInfo with the updated metadata.\n\n\n\n\n\n","category":"function"},{"location":"reference/user/#User-operations","page":"User operations","title":"User operations","text":"","category":"section"},{"location":"reference/user/","page":"User operations","title":"User operations","text":"createuser\ngetuser\nupdateuserpassword\nupdateuseradmin\ndeleteuser","category":"page"},{"location":"reference/user/#MLFlowClient.createuser","page":"User operations","title":"MLFlowClient.createuser","text":"createuser(instance::MLFlow, username::String, password::String)\n\nArguments\n\ninstance: MLFlow configuration.\nusername: Username.\npassword: Password.\n\nReturns\n\nAn User object.\n\n\n\n\n\n","category":"function"},{"location":"reference/user/#MLFlowClient.getuser","page":"User operations","title":"MLFlowClient.getuser","text":"getuser(instance::MLFlow, username::String)\n\nArguments\n\ninstance: MLFlow configuration.\nusername: Username.\n\nReturns\n\nAn User object.\n\n\n\n\n\n","category":"function"},{"location":"reference/user/#MLFlowClient.updateuserpassword","page":"User operations","title":"MLFlowClient.updateuserpassword","text":"updateuserpassword(instance::MLFlow, username::String, password::String)\n\nArguments\n\ninstance: MLFlow configuration.\nusername: Username.\npassword: New password.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/user/#MLFlowClient.updateuseradmin","page":"User operations","title":"MLFlowClient.updateuseradmin","text":"updateuseradmin(instance::MLFlow, username::String, is_admin::Bool)\n\nArguments\n\ninstance: MLFlow configuration.\nusername: Username.\nis_admin: New admin status.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/user/#MLFlowClient.deleteuser","page":"User operations","title":"MLFlowClient.deleteuser","text":"deleteuser(instance::MLFlow, username::String)\n\nArguments\n\ninstance: MLFlow configuration.\nusername: Username.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/model_version/#Model-version-operations","page":"Model version operations","title":"Model version operations","text":"","category":"section"},{"location":"reference/model_version/","page":"Model version operations","title":"Model version operations","text":"getlatestmodelversions\ncreatemodelversion\ngetmodelversion\nupdatemodelversion\ndeletemodelversion\nsearchmodelversions\ngetdownloaduriformodelversionartifacts\ntransitionmodelversionstage\nsetmodelversiontag\ndeletemodelversiontag\ngetmodelversionbyalias","category":"page"},{"location":"reference/model_version/#MLFlowClient.getlatestmodelversions","page":"Model version operations","title":"MLFlowClient.getlatestmodelversions","text":"getlatestmodelversions(instance::MLFlow, name::String;\n    stages::Array{String}=String[])\n\nArguments\n\ninstance: MLFlow configuration.\nstages: List of stages.\n\nReturns\n\nLatest ModelVersion for each requests stage.\n\n\n\n\n\n","category":"function"},{"location":"reference/model_version/#MLFlowClient.createmodelversion","page":"Model version operations","title":"MLFlowClient.createmodelversion","text":"createmodelversion(instance::MLFlow, name::String, source::String;\n    run_id::Union{String, Missing}=missing, tags::MLFlowUpsertData{Tag}=Tag[],\n    run_link::Union{String, Missing}=missing,\n    description::Union{String, Missing}=missing)\n\nArguments\n\ninstance: MLFlow configuration.\nname: Register model under this name.\nsource: URI indicating the location of the model artifacts.\nrun_id: Run id for correlation.\ntags: List of Tag to associate with the model version.\nrun_link: Link to the Run that generated the ModelVersion.\ndescription: Optional description for ModelVersion.\n\nReturns\n\nModelVersion created.\n\n\n\n\n\n","category":"function"},{"location":"reference/model_version/#MLFlowClient.getmodelversion","page":"Model version operations","title":"MLFlowClient.getmodelversion","text":"getmodelversion(instance::MLFlow, name::String, version::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: Name of the RegisteredModel.\nversion: ModelVersion number.\n\nReturns\n\nModelVersion requested.\n\n\n\n\n\n","category":"function"},{"location":"reference/model_version/#MLFlowClient.updatemodelversion","page":"Model version operations","title":"MLFlowClient.updatemodelversion","text":"updatemodelversion(instance::MLFlow, name::String, version::String;\n    description::Union{String, Missing}=missing)\n\nArguments\n\ninstance: MLFlow configuration.\nname: Name of the RegisteredModel.\nversion: ModelVersion number.\ndescription: Optional description for ModelVersion.\n\nReturns\n\nModelVersion generated for this model in registry.\n\n\n\n\n\n","category":"function"},{"location":"reference/model_version/#MLFlowClient.deletemodelversion","page":"Model version operations","title":"MLFlowClient.deletemodelversion","text":"deletemodelversion(instance::MLFlow, name::String, version::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: Name of the RegisteredModel.\nversion: ModelVersion number.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/model_version/#MLFlowClient.searchmodelversions","page":"Model version operations","title":"MLFlowClient.searchmodelversions","text":"searchmodelversions(instance::MLFlow, filter::String, max_results::Int64,\n    order_by::String, page_token::String)\n\nArguments\n\ninstance: MLFlow configuration.\nfilter: String filter condition. See MLFlow documentation.\nmax_results: Maximum number of models desired.\norder_by: List of columns to be ordered by including model name, version, stage with an   optional “DESC” or “ASC” annotation, where “ASC” is the default. Tiebreaks are done by   latest stage transition timestamp, followed by name ASC, followed by version DESC.\npage_token: Pagination token to go to next page based on previous search query.\n\nReturns\n\nVector of ModelVersion that were found in the MLFlow instance.\nThe next page token if there are more results.\n\n\n\n\n\n","category":"function"},{"location":"reference/model_version/#MLFlowClient.getdownloaduriformodelversionartifacts","page":"Model version operations","title":"MLFlowClient.getdownloaduriformodelversionartifacts","text":"getdownloaduriformodelversionartifacts(instance::MLFlow, name::String, version::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: Name of the RegisteredModel.\nversion: ModelVersion number.\n\nReturns\n\nURI corresponding to where artifacts for this ModelVersion are stored.\n\n\n\n\n\n","category":"function"},{"location":"reference/model_version/#MLFlowClient.transitionmodelversionstage","page":"Model version operations","title":"MLFlowClient.transitionmodelversionstage","text":"transitionmodelversionstage(instance::MLFlow, name::String, version::String,\n    stage::String, archive_existing_versions::Bool)\n\nArguments\n\ninstance: MLFlow configuration.\nname: Name of the RegisteredModel.\nversion: ModelVersion number.\nstage: Transition ModelVersion to new stage.\narchive_existing_versions: When transitioning a model version to a particular stage,   this flag dictates whether all existing model versions in that stage should be atomically   moved to the “archived” stage. This ensures that at-most-one model version exists in the   target stage.\n\nReturns\n\nUpdated ModelVersion.\n\n\n\n\n\n","category":"function"},{"location":"reference/model_version/#MLFlowClient.setmodelversiontag","page":"Model version operations","title":"MLFlowClient.setmodelversiontag","text":"setmodelversiontag(instance::MLFlow, name::String, key::String, value::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: Unique name of the model.\nversion: Model version number.\nkey: Name of the Tag.\nvalue: String value of the tag being logged.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/model_version/#MLFlowClient.deletemodelversiontag","page":"Model version operations","title":"MLFlowClient.deletemodelversiontag","text":"deletemodelversiontag(instance::MLFlow, name::String, version::String, key::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: Name of the RegisteredModel that the tag was logged under.\nversion: ModelVersion number that the tag was logged under.\nkey: Name of the Tag.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/model_version/#MLFlowClient.getmodelversionbyalias","page":"Model version operations","title":"MLFlowClient.getmodelversionbyalias","text":"getmodelversionbyalias(instance::MLFlow, name::String, alias::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: Name of the RegisteredModel.\nalias: Name of the alias.\n\nReturns\n\nModelVersion requested.\n\n\n\n\n\n","category":"function"},{"location":"reference/artifact/#Artifact-operations","page":"Artifact operations","title":"Artifact operations","text":"","category":"section"},{"location":"reference/artifact/","page":"Artifact operations","title":"Artifact operations","text":"listartifacts","category":"page"},{"location":"reference/artifact/#MLFlowClient.listartifacts","page":"Artifact operations","title":"MLFlowClient.listartifacts","text":"listartifacts(instance::MLFlow, run_id::String; path::String=\"\", page_token::String=\"\")\nlistartifacts(instance::MLFlow, run::Run; path::String=\"\", page_token::String=\"\")\n\nList artifacts for a Run.\n\nArguments\n\ninstance: MLFlow configuration.\nrun_id: ID of the Run whose artifacts to list.\npath: Filter artifacts matching this path (a relative path from the root artifact   directory).\npage_token: Token indicating the page of artifact results to fetch\n\nReturns\n\nRoot artifact directory for the Run.\nList of file location and metadata for artifacts.\nToken that can be used to retrieve the next page of artifact results.\n\n\n\n\n\n","category":"function"},{"location":"reference/registered_model/#Registered-model-operations","page":"Registered model operations","title":"Registered model operations","text":"","category":"section"},{"location":"reference/registered_model/","page":"Registered model operations","title":"Registered model operations","text":"createregisteredmodel\ngetregisteredmodel\nrenameregisteredmodel\nupdateregisteredmodel\ndeleteregisteredmodel\nsearchregisteredmodels\nsetregisteredmodeltag\ndeleteregisteredmodeltag\ndeleteregisteredmodelalias\nsetregisteredmodelalias\ncreateregisteredmodelpermission\ngetregisteredmodelpermission\nupdateregisteredmodelpermission\ndeleteregisteredmodelpermission","category":"page"},{"location":"reference/registered_model/#MLFlowClient.createregisteredmodel","page":"Registered model operations","title":"MLFlowClient.createregisteredmodel","text":"createregisteredmodel(instance::MLFlow, name::String;\n    tags::MLFlowUpsertData{Tag}=Tag[], description::Union{String, Missing}=missing)\n\nCreate a RegisteredModel with a name. Returns the newly created RegisteredModel. Validates that another RegisteredModel with the same name does not already exist and fails if another RegisteredModel with the same name already exists.\n\nArguments\n\ninstance: MLFlow configuration.\nname: Register models under this name.\ntags: A collection of Tag.\ndescription: Optional description for RegisteredModel.\n\nReturns\n\nAn instance of type RegisteredModel.\n\n\n\n\n\n","category":"function"},{"location":"reference/registered_model/#MLFlowClient.getregisteredmodel","page":"Registered model operations","title":"MLFlowClient.getregisteredmodel","text":"getregisteredmodel(instance::MLFlow, name::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: RegisteredModel model unique name identifier.\n\nReturns\n\nAn instance of type RegisteredModel.\n\n\n\n\n\n","category":"function"},{"location":"reference/registered_model/#MLFlowClient.renameregisteredmodel","page":"Registered model operations","title":"MLFlowClient.renameregisteredmodel","text":"renameregisteredmodel(instance::MLFlow, name::String, new_name::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: RegisteredModel unique name identifier.\nnew_name: If provided, updates the name for this RegisteredModel.\n\nReturns\n\nAn instance of type RegisteredModel.\n\n\n\n\n\n","category":"function"},{"location":"reference/registered_model/#MLFlowClient.updateregisteredmodel","page":"Registered model operations","title":"MLFlowClient.updateregisteredmodel","text":"updateregisteredmodel(instance::MLFlow, name::String;\n    description::Union{String, Missing}=missing)\n\nArguments\n\ninstance: MLFlow configuration.\nname: RegisteredModel unique name identifier.\ndescription: If provided, updates the description for this RegisteredModel.\n\nReturns\n\nAn instance of type RegisteredModel.\n\n\n\n\n\n","category":"function"},{"location":"reference/registered_model/#MLFlowClient.deleteregisteredmodel","page":"Registered model operations","title":"MLFlowClient.deleteregisteredmodel","text":"deleteregisteredmodel(instance::MLFlow, name::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: RegisteredModel unique name identifier.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/registered_model/#MLFlowClient.searchregisteredmodels","page":"Registered model operations","title":"MLFlowClient.searchregisteredmodels","text":"searchregisteredmodels(instance::MLFlow, filter::String, max_results::Int64,\n    order_by::String, page_token::String)\n\nArguments\n\ninstance: MLFlow configuration.\nfilter: String filter condition. See MLFlow documentation.\nmax_results: Maximum number of models desired.\norder_by: List of columns for ordering search results, which can include model name   and last updated timestamp with an optional “DESC” or “ASC” annotation, where “ASC” is   the default. Tiebreaks are done by model name ASC.\npage_token: Pagination token to go to the next page based on a previous search query.\n\nReturns\n\nVector of RegisteredModel that were found in the MLFlow instance.\nThe next page token if there are more results.\n\n\n\n\n\n","category":"function"},{"location":"reference/registered_model/#MLFlowClient.setregisteredmodeltag","page":"Registered model operations","title":"MLFlowClient.setregisteredmodeltag","text":"setregisteredmodeltag(instance::MLFlow, name::String, key::String, value::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: Unique name of the model.\nkey: Name of the Tag.\nvalue: String value of the Tag being logged.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/registered_model/#MLFlowClient.deleteregisteredmodeltag","page":"Registered model operations","title":"MLFlowClient.deleteregisteredmodeltag","text":"deleteregisteredmodeltag(instance::MLFlow, name::String, key::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: Name of the RegisteredModel that the tag was logged under.\nkey: Name of the Tag.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/registered_model/#MLFlowClient.deleteregisteredmodelalias","page":"Registered model operations","title":"MLFlowClient.deleteregisteredmodelalias","text":"deleteregisteredmodelalias(instance::MLFlow, name::String, alias::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: Name of the RegisteredModel.\nalias: Name of the alias.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/registered_model/#MLFlowClient.setregisteredmodelalias","page":"Registered model operations","title":"MLFlowClient.setregisteredmodelalias","text":"setregisteredmodelalias(instance::MLFlow, name::String, alias::String, version::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: Name of the RegisteredModel.\nalias: Name of the alias.\nversion: ModelVersion number.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/registered_model/#MLFlowClient.createregisteredmodelpermission","page":"Registered model operations","title":"MLFlowClient.createregisteredmodelpermission","text":"createregisteredmodelpermission(instance::MLFlow, name::String, username::String,\n    permission::Permission)\n\nArguments\n\ninstance: MLFlow configuration.\nname: RegisteredModel name.\nusername: User username.\npermission: Permission to grant.\n\nReturns\n\nAn instance of type RegisteredModelPermission.\n\n\n\n\n\n","category":"function"},{"location":"reference/registered_model/#MLFlowClient.getregisteredmodelpermission","page":"Registered model operations","title":"MLFlowClient.getregisteredmodelpermission","text":"getregisteredmodelpermission(instance::MLFlow, name::String, username::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: RegisteredModel name.\nusername: User username.\n\nReturns\n\nAn instance of type RegisteredModelPermission.\n\n\n\n\n\n","category":"function"},{"location":"reference/registered_model/#MLFlowClient.updateregisteredmodelpermission","page":"Registered model operations","title":"MLFlowClient.updateregisteredmodelpermission","text":"updateregisteredmodelpermission(instance::MLFlow, name::String, username::String,\n    permission::Permission)\n\nArguments\n\ninstance: MLFlow configuration.\nname: RegisteredModel name.\nusername: User username.\npermission: New Permission to grant.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/registered_model/#MLFlowClient.deleteregisteredmodelpermission","page":"Registered model operations","title":"MLFlowClient.deleteregisteredmodelpermission","text":"deleteregisteredmodelpermission(instance::MLFlow, name::String, username::String)\n\nArguments\n\ninstance: MLFlow configuration.\nname: RegisteredModel name.\nusername: User username.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/experiment/#Experiment-operations","page":"Experiment operations","title":"Experiment operations","text":"","category":"section"},{"location":"reference/experiment/","page":"Experiment operations","title":"Experiment operations","text":"createexperiment\ngetexperiment\ngetexperimentbyname\ndeleteexperiment\nrestoreexperiment\nupdateexperiment\nsearchexperiments\nsetexperimenttag\ncreateexperimentpermission\ngetexperimentpermission\nupdateexperimentpermission\ndeleteexperimentpermission","category":"page"},{"location":"reference/experiment/#MLFlowClient.createexperiment","page":"Experiment operations","title":"MLFlowClient.createexperiment","text":"createexperiment(instance::MLFlow, name::String;\n    artifact_location::Union{String, Missing}=missing,\n    tags::MLFlowUpsertData{Tag}=Tag[])\n\nCreate an Experiment with a name. Returns the newly created Experiment. Validates that another Experiment with the same name does not already exist and fails if another Experiment with the same name already exists.\n\nArguments\n\ninstance: MLFlow configuration.\nname: Experiment name. This field is required.\nartifact_location: Location where all artifacts for the Experiment   are stored. If not provided, the remote server will select an appropriate   default.\ntags: A collection of Tag to set on the Experiment.\n\nReturns\n\nThe ID of the newly created Experiment.\n\n\n\n\n\n","category":"function"},{"location":"reference/experiment/#MLFlowClient.getexperiment","page":"Experiment operations","title":"MLFlowClient.getexperiment","text":"getexperiment(instance::MLFlow, experiment_id::String)\ngetexperiment(instance::MLFlow, experiment_id::Integer)\n\nGet metadata for an Experiment. This method works on deleted experiments.\n\nArguments\n\ninstance: MLFlow configuration.\nexperiment_id: ID of the associated Experiment.\n\nReturns\n\nAn instance of type Experiment.\n\n\n\n\n\n","category":"function"},{"location":"reference/experiment/#MLFlowClient.getexperimentbyname","page":"Experiment operations","title":"MLFlowClient.getexperimentbyname","text":"getexperimentbyname(instance::MLFlow, experiment_name::String)\n\nGet metadata for an Experiment.\n\nThis endpoint will return deleted experiments, but prefers the active Experiment if an active and deleted Experiment share the same name. If multiple deleted experiments share the same name, the API will return one of them.\n\nArguments\n\ninstance: MLFlow configuration.\nexperiment_name: Name of the associated Experiment.\n\nReturns\n\nAn instance of type Experiment.\n\n\n\n\n\n","category":"function"},{"location":"reference/experiment/#MLFlowClient.deleteexperiment","page":"Experiment operations","title":"MLFlowClient.deleteexperiment","text":"deleteexperiment(instance::MLFlow, experiment_id::String)\ndeleteexperiment(instance::MLFlow, experiment_id::Integer)\ndeleteexperiment(instance::MLFlow, experiment::Experiment)\n\nMark an Experiment and associated metadata, runs, metrics, params, and tags for deletion. If the Experiment uses FileStore, artifacts associated with Experiment are also deleted.\n\nArguments\n\ninstance: MLFlow configuration.\nexperiment_id: ID of the associated Experiment.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/experiment/#MLFlowClient.restoreexperiment","page":"Experiment operations","title":"MLFlowClient.restoreexperiment","text":"restoreexperiment(instance::MLFlow, experiment_id::String)\nrestoreexperiment(instance::MLFlow, experiment_id::Integer)\nrestoreexperiment(instance::MLFlow, experiment::Experiment)\n\nRestore an Experiment marked for deletion. This also restores associated metadata, runs, metrics, params, and tags. If Experiment uses FileStore, underlying artifacts associated with Experiment are also restored.\n\nArguments\n\ninstance: MLFlow configuration.\nexperiment_id: ID of the associated Experiment.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/experiment/#MLFlowClient.updateexperiment","page":"Experiment operations","title":"MLFlowClient.updateexperiment","text":"updateexperiment(instance::MLFlow, experiment_id::String, new_name::String)\nupdateexperiment(instance::MLFlow, experiment_id::Integer, new_name::String)\nupdateexperiment(instance::MLFlow, experiment::Experiment, new_name::String)\n\nUpdate Experiment metadata.\n\nArguments\n\ninstance: MLFlow configuration.\nexperiment_id: ID of the associated Experiment.\nnew_name: If provided, the Experiment name is changed to the new name. The new name   must be unique.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/experiment/#MLFlowClient.searchexperiments","page":"Experiment operations","title":"MLFlowClient.searchexperiments","text":"searchexperiments(instance::MLFlow; max_results::Int64=20000, page_token::String=\"\",\n    filter::String=\"\", order_by::Array{String}=String[],\n    view_type::ViewType=ACTIVE_ONLY)\n\nArguments\n\ninstance: MLFlow configuration.\nmax_results: Maximum number of experiments desired.\npage_token: Token indicating the page of experiments to fetch.\nfilter: A filter expression over Experiment attributes and tags that allows returning a   subset of experiments. See MLFlow documentation.\norder_by: List of columns for ordering search results, which can include Experiment   name and id with an optional “DESC” or “ASC” annotation, where “ASC” is the default.\nview_type: Qualifier for type of experiments to be returned. If unspecified, return   only active experiments. For more values, see ViewType.\n\nReturns\n\nVector of Experiment that were found in the MLFlow instance.\nThe next page token if there are more results.\n\n\n\n\n\n","category":"function"},{"location":"reference/experiment/#MLFlowClient.setexperimenttag","page":"Experiment operations","title":"MLFlowClient.setexperimenttag","text":"setexperimenttag(instance::MLFlow, experiment_id::String, key::String, value::String)\nsetexperimenttag(instance::MLFlow, experiment_id::Integer, key::String, value::String)\nsetexperimenttag(instance::MLFlow, experiment::Experiment, key::String, value::String)\n\nSet a tag on an Experiment. Experiment tags are metadata that can be updated.\n\nArguments\n\nexperiment_id: ID of the Experiment under which to log the tag.\nkey: Name of the tag.\nvalue: String value of the tag being logged.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/experiment/#MLFlowClient.createexperimentpermission","page":"Experiment operations","title":"MLFlowClient.createexperimentpermission","text":"createexperimentpermission(instance::MLFlow, experiment_id::String, username::String,\n    permission::Permission)\ncreateexperimentpermission(instance::MLFlow, experiment_id::Integer, username::String,\n    permission::Permission)\ncreateexperimentpermission(instance::MLFlow, experiment::Experiment, username::String,\n    permission::Permission)\n\nArguments\n\ninstance: MLFlow configuration.\nexperiment_id: Experiment id.\nusername: User username.\npermission: Permission to grant.\n\nReturns\n\nAn instance of type ExperimentPermission.\n\n\n\n\n\n","category":"function"},{"location":"reference/experiment/#MLFlowClient.getexperimentpermission","page":"Experiment operations","title":"MLFlowClient.getexperimentpermission","text":"getexperimentpermission(instance::MLFlow, experiment_id::String, username::String)\ngetexperimentpermission(instance::MLFlow, experiment_id::Integer, username::String)\ngetexperimentpermission(instance::MLFlow, experiment::Experiment, username::String)\n\nArguments\n\ninstance: MLFlow configuration.\nexperiment_id: Experiment id.\nusername: User username.\n\nReturns\n\nAn instance of type ExperimentPermission.\n\n\n\n\n\n","category":"function"},{"location":"reference/experiment/#MLFlowClient.updateexperimentpermission","page":"Experiment operations","title":"MLFlowClient.updateexperimentpermission","text":"updateexperimentpermission(instance::MLFlow, experiment_id::String, username::String,\n    permission::Permission)\nupdateexperimentpermission(instance::MLFlow, experiment_id::Integer, username::String,\n    permission::Permission)\nupdateexperimentpermission(instance::MLFlow, experiment::Experiment, username::String,\n    permission::Permission)\n\nArguments\n\ninstance: MLFlow configuration.\nexperiment_id: Experiment id.\nusername: User username.\npermission: Permission to grant.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/experiment/#MLFlowClient.deleteexperimentpermission","page":"Experiment operations","title":"MLFlowClient.deleteexperimentpermission","text":"deleteexperimentpermission(instance::MLFlow, experiment_id::String, username::String)\ndeleteexperimentpermission(instance::MLFlow, experiment_id::Integer, username::String)\ndeleteexperimentpermission(instance::MLFlow, experiment::Experiment, username::String)\n\nArguments\n\ninstance: MLFlow configuration.\nexperiment_id: Experiment id.\nusername: User username.\n\nReturns\n\ntrue if successful. Otherwise, raises exception.\n\n\n\n\n\n","category":"function"},{"location":"reference/misc/#Miscellaneous-operations","page":"Miscellaneous operations","title":"Miscellaneous operations","text":"","category":"section"},{"location":"reference/misc/","page":"Miscellaneous operations","title":"Miscellaneous operations","text":"getmetrichistory\nrefresh","category":"page"},{"location":"reference/misc/#MLFlowClient.getmetrichistory","page":"Miscellaneous operations","title":"MLFlowClient.getmetrichistory","text":"getmetrichistory(instance::MLFlow, run_id::String, metric_key::String;\n    page_token::String=\"\", max_results::Union{Int64, Missing}=missing)\n\nGet a list of all values for the specified Metric for a given Run.\n\nArguments\n\ninstance: MLFlow configuration.\nrun_id: ID of the Run from which to fetch Metric values.\nmetric_key: Name of the Metric to fetch.\npage_token: Token indicating the page of Metric history to fetch.\nmax_results: Maximum number of logged instances of a Metric for a   Run to return per call.\n\nReturns\n\nA list of all historical values for the specified Metric in the specified   Run.\nThe next page token if there are more results.\n\n\n\n\n\n","category":"function"},{"location":"reference/misc/#MLFlowClient.refresh","page":"Miscellaneous operations","title":"MLFlowClient.refresh","text":"refresh(instance::MLFlow, run::Run)\nrefresh(instance::MLFlow, experiment::Experiment)\n\nGet the latest metadata for a Run or Experiment.\n\nArguments\n\ninstance: MLFlow configuration.\nrun or experiment: Run or Experiment to refresh.\n\nReturns\n\nAn instance of type Run or Experiment.\n\n\n\n\n\n","category":"function"},{"location":"reference/types/#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"reference/types/","page":"Types","title":"Types","text":"MLFlow\nTag\nViewType\nRunStatus\nModelVersionStatus\nDataset\nDatasetInput\nFileInfo\nModelVersion\nRegisteredModel\nRegisteredModelAlias\nExperiment\nRun\nParam\nMetric\nRunData\nRunInfo\nRunInputs\nUser\nPermission\nExperimentPermission\nRegisteredModelPermission","category":"page"},{"location":"reference/types/#MLFlowClient.MLFlow","page":"Types","title":"MLFlowClient.MLFlow","text":"MLFlow\n\nBase type which defines location and version for MLFlow API service.\n\nFields\n\napiroot::String: API root URL, e.g. http://localhost:5000/api\napiversion::Union{Integer, AbstractFloat}: used API version, e.g. 2.0\nheaders::Dict: HTTP headers to be provided with the REST API requests (useful for   authetication tokens) Default is false, using the REST API endpoint.\n\nExamples\n\nmlf = MLFlow()\n\nremote_url=\"https://<your-server>.cloud.databricks.com\"; # address of your remote server\nmlf = MLFlow(remote_url, headers=Dict(\"Authorization\" => \"Bearer <your-secret-token>\"))\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.Tag","page":"Types","title":"MLFlowClient.Tag","text":"Tag <: LoggingData\n\nGeneric tag type for MLFlow entities.\n\nFields\n\nkey::String: The tag key.\nvalue::String: The tag value.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.ViewType","page":"Types","title":"MLFlowClient.ViewType","text":"ViewType\n\nView type for ListExperiments query.\n\nMembers\n\nACTIVE_ONLY: Default. Return only active experiments.\nDELETED_ONLY: Return only deleted experiments.\nALL: Get all experiments.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.RunStatus","page":"Types","title":"MLFlowClient.RunStatus","text":"RunStatus\n\nStatus of a run.\n\nMembers\n\nRUNNING: Run has been initiated.\nSCHEDULED: Run is scheduled to run at a later time.\nFINISHED: Run has completed.\nFAILED: Run execution failed.\nKILLED: Run killed by user.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.ModelVersionStatus","page":"Types","title":"MLFlowClient.ModelVersionStatus","text":"ModelVersionStatus\n\nMembers\n\nPENDING_REGISTRATION: Request to register a new model version is pending as server   performs background tasks.\nFAILED_REGISTRATION: Request to register a new model version has failed.\nREADY: Model version is ready for use.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.Dataset","page":"Types","title":"MLFlowClient.Dataset","text":"Dataset\n\nRepresents a reference to data used for training, testing, or evaluation during the model development process.\n\nFields\n\nname::String: The name of the dataset.\ndigest::String: The digest of the dataset.\nsource_type::String: The type of the dataset source.\nsource::String: Source information for the dataset.\nschema::String: The schema of the dataset. This field is optional.\nprofile::String: The profile of the dataset. This field is optional.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.DatasetInput","page":"Types","title":"MLFlowClient.DatasetInput","text":"DatasetInput\n\nRepresents a dataset and input tags.\n\nFields\n\ntags::Array{Tag}: A list of tags for the dataset input.\ndataset::Dataset: The dataset being used as a run input.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.FileInfo","page":"Types","title":"MLFlowClient.FileInfo","text":"FileInfo\n\nFields\n\npath::String: Path relative to the root artifact directory run.\nis_dir::Bool: Whether the path is a directory.\nfile_size::Int64: Size in bytes. Unset for directories.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.ModelVersion","page":"Types","title":"MLFlowClient.ModelVersion","text":"ModelVersion\n\nFields\n\nname::String: Unique name of the model.\nversion::String: Model’s version number.\ncreation_timestamp::Int64: Timestamp recorded when this model_version was created.\nlast_updated_timestamp::Int64: Timestamp recorded when metadata for this model_version   was last updated.\nuser_id::Union{String, Nothing}: User that created this model_version.\ncurrent_stage::String: Current stage for this model_version.\ndescription::String: Description of this model_version.\nsource::String: URI indicating the location of the source model artifacts, used when   creating model_version.\nrun_id::String: MLflow run ID used when creating model_version, if source was generated   by an experiment run stored in MLflow tracking server.\nstatus::ModelVersionStatus: Current status of model_version.\nstatus_message::String: Details on current status, if it is pending or failed.\ntags::Array{Tag}: Additional metadata key-value pairs.\nrun_link::String: Direct link to the run that generated this version. This field is set   at model version creation time only for model versions whose source run is from a   tracking server that is different from the registry server.\naliases::Array{String}: Aliases pointing to this model_version.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.RegisteredModel","page":"Types","title":"MLFlowClient.RegisteredModel","text":"RegisteredModel\n\nFields\n\nname::String: Unique name for the model.\ncreation_timestamp::Int64: Timestamp recorded when this RegisteredModel was created.\nlast_updated_timestamp::Int64: Timestamp recorded when metadata for this   RegisteredModel was last updated.\nuser_id::Union{String, Nothing}: User that created this RegisteredModel.\ndescription::Union{String, Nothing}: Description of this RegisteredModel.\nlatest_versions::Array{ModelVersion}: Collection of latest model versions for each   stage. Only contains models with current READY status.\ntags::Array{Tag}: Additional metadata key-value pairs.\naliases::Array{RegisteredModelAlias}: Aliases pointing to model versions associated   with this RegisteredModel.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.RegisteredModelAlias","page":"Types","title":"MLFlowClient.RegisteredModelAlias","text":"RegisteredModelAlias\n\nAlias for a registered model.\n\nFields\n\nalias::String: The name of the alias.\nversion::String: The model version number that the alias points to.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.Experiment","page":"Types","title":"MLFlowClient.Experiment","text":"Experiment\n\nFields\n\nexperiment_id::Integer: Unique identifier for the experiment.\nname::String: Human readable name that identifies the experiment.\nartifact_location::String: Location where artifacts for the experiment are stored.\nlifecycle_stage::String: Current life cycle stage of the experiment: “active” or   “deleted”. Deleted experiments are not returned by APIs.\nlast_update_time::Int64: Last update time.\ncreation_time::Int64: Creation time.\ntags::Array{Tag}: Additional metadata key-value pairs.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.Run","page":"Types","title":"MLFlowClient.Run","text":"Run\n\nA single run.\n\nFields\n\ninfo::RunInfo: Metadata of the run.\ndata::RunData: Run data (metrics, params, and tags).\ninputs::RunInputs: Run inputs.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.Param","page":"Types","title":"MLFlowClient.Param","text":"Param <: LoggingData\n\nParam associated with a run.\n\nFields\n\nkey::String: Key identifying this param.\nvalue::String: Value associated with this param.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.Metric","page":"Types","title":"MLFlowClient.Metric","text":"Metric <: LoggingData\n\nMetric associated with a run, represented as a key-value pair.\n\nFields\n\nkey::String: Key identifying this metric.\nvalue::Float64: Value associated with this metric.\ntimestamp::Int64: The timestamp at which this metric was recorded.\nstep::Union{Int64, Nothing}: Step at which to log the metric.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.RunData","page":"Types","title":"MLFlowClient.RunData","text":"RunInputs\n\nRun data (metrics, params, and tags).\n\nFields\n\nmetrics::Array{Metric}: Run metrics.\nparams::Array{Param}: Run parameters.\ntags::Array{Tag}: Additional metadata key-value pairs.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.RunInfo","page":"Types","title":"MLFlowClient.RunInfo","text":"RunInfo\n\nMetadata of a single run.\n\nFields\n\nrun_id::String: Unique identifier for the run.\nrun_name::String: The name of the run.\nexperiment_id::String: The experiment ID.\nstatus::RunStatus: Current status of the run.\nstart_time::Int64: Unix timestamp of when the run started in milliseconds.\nend_time::Int64: Unix timestamp of when the run ended in milliseconds.\nartifact_uri::String: URI of the directory where artifacts should be uploaded. This can   be a local path (starting with “/”), or a distributed file system (DFS) path,   like s3://bucket/directory or dbfs:/my/directory. If not set, the local ./mlruns   directory is chosen.\nlifecycle_stage::String: Current life cycle stage of the experiment: \"active\" or   \"deleted\".\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.RunInputs","page":"Types","title":"MLFlowClient.RunInputs","text":"RunInputs\n\nRun inputs.\n\nFields\n\ndataset_inputs::Array{DatasetInput}: Dataset inputs to the Run.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.User","page":"Types","title":"MLFlowClient.User","text":"User\n\nFields\n\nid::String: User ID.\nusername::String: Username.\nis_admin::Bool: Whether the user is an admin.\nexperiment_permissions::Array{ExperimentPermission}: All experiment permissions   explicitly granted to the user.\nregistered_model_permissions::Array{RegisteredModelPermission}: All registered model   explicitly granted to the user.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.Permission","page":"Types","title":"MLFlowClient.Permission","text":"Permission\n\nPermission of a user to an experiment or a registered model.\n\nMembers\n\nREAD: Can read.\nEDIT: Can read and update.\nMANAGE: Can read, update, delete and manage.\nNO_PERMISSIONS: No permissions.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.ExperimentPermission","page":"Types","title":"MLFlowClient.ExperimentPermission","text":"ExperimentPermission\n\nFields\n\nexperiment_id::String: Experiment id.\nuser_id::String: User id.\npermission::Permission: Permission granted.\n\n\n\n\n\n","category":"type"},{"location":"reference/types/#MLFlowClient.RegisteredModelPermission","page":"Types","title":"MLFlowClient.RegisteredModelPermission","text":"RegisteredModelPermission\n\nFields\n\nname::String: RegisteredModel name.\nuser_id::String: User id.\npermission::Permission: Permission granted.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MLFlowClient","category":"page"},{"location":"#MLFlowClient","page":"Home","title":"MLFlowClient","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MLFlowClient","category":"page"},{"location":"#MLFlowClient.MLFlowClient","page":"Home","title":"MLFlowClient.MLFlowClient","text":"MLFlowClient\n\nMLFlowClient is a Julia package for working with MLFlow using the REST API v2.0.\n\nMLFlowClient allows you to create and manage MLFlow experiments, runs, and log metrics and artifacts. If you are not familiar with MLFlow and its concepts, please refer to MLFlow documentation.\n\n\n\n\n\n","category":"module"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install MLFlowClient, start a julia session and run the following:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg\n\njulia> Pkg.add(\"MLFlowClient\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"or simply:","category":"page"},{"location":"","page":"Home","title":"Home","text":"]add MLFlowClient","category":"page"},{"location":"tutorial/#Tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For a more comprehensive MLFlow tutorial, refer to its documentation.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This tutorial assumes that you are familiar with MLFlow concepts and focuses on usage of MLFlowClient.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Suppose that you are developing a method getpricepath(α, n) which generates a random price path using α. This example is adapted from QuantEcon Chapter 1.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Plots\nusing Random\n\nαs = [0.0, 0.9, 0.98]\nn = 100\np = plot()\n\nfunction getpricepath(α, n)\n    x = zeros(n + 1)\n    x[1] = 0.0\n    for t in 1:n\n        x[t+1] = α * x[t] + rand()\n    end\n    x\nend\n\npricepaths = [getpricepath(α, n) for α in αs]\n\nfor (idx, pricepath) in enumerate(pricepaths)\n    plot!(p, pricepath,\n        title=\"Random price paths\",\n        label=\"alpha = $(αs[idx])\",\n        xlabel=\"Timestep\", ylabel=\"Price\"\n    )\nend\n\np","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This could result in the following plot:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"(Image: )","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Now, suppose that you are interested in turning this into an experiment which stores its metadata and results in MLFlow using MLFlowClient. You could amend the code like this:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"note: Note\nRunning this example assumes you have an active MLFlow running on your computer.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using Plots\nusing MLFlowClient\nusing Random\n\n# Parameters\nαs = [0.0, 0.9, 0.98]\nn = 100\n\n\"Method that generates price paths of length `n` based on `α`\"\nfunction getpricepath(α, n)\n    x = zeros(n + 1)\n    x[1] = 0.0\n    for t in 1:n\n        x[t+1] = α * x[t] + rand()\n    end\n    x\nend\np = plot()\n\n# Create MLFlow instance\nmlf = MLFlow(\"http://localhost:5000/api\")\n\n# Initiate new experiment\nexperiment_id = createexperiment(mlf; name=\"price-paths\")\n\n# Create a run in the new experiment\nexprun = createrun(mlf, experiment_id)\n\n# Log parameters and their values\nfor (idx, α) in enumerate(αs)\n    logparam(mlf, exprun, \"alpha$(idx)\", string(α)) # MLFlow only supports string parameter values\nend\n\n# Obtain pricepaths\npricepaths = [getpricepath(α, n) for α in αs]\n\n# Log pricepaths in MLFlow\nfor (idx, pricepath) in enumerate(pricepaths)\n    plot!(p,\n        pricepath,\n        title=\"Random price paths\",\n        label=\"alpha = $(αs[idx])\",\n        xlabel=\"Timestep\",\n        ylabel=\"Price\"\n    )\n\n    logmetric(mlf, exprun, \"pricepath$(idx)\", pricepath)\nend\n\n# Save the price path plot as an image\nplotfilename = \"pricepaths-plot.png\"\npng(plotfilename)\n\n# Upload the plot as an artifact associated with the MLFlow experiment's run\nlogartifact(mlf, exprun, plotfilename)\n\n# remote temporary plot which was already uploaded in MLFlow\nrm(plotfilename)\n\n# complete the experiment\nupdaterun(mlf, exprun, \"FINISHED\")","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This will result in the folowing experiment created in your MLFlow which is running on http://localhost/:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"(Image: )","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can also observe series logged against individual metrics, i.e. pricepath1 looks like this in MLFlow:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"(Image: )","category":"page"}]
}
